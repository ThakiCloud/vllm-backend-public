# Design

## 벤치마크 백엔드 시스템 설계 원칙

### 1. Microservices Architecture (마이크로서비스 아키텍처)
- **독립성 및 확장성**: 각 서비스(`benchmark-deployer`, `benchmark-manager`, `benchmark-results`)는 독립적으로 개발, 배포, 확장되며, 각각 고유한 책임을 가집니다.
- **명확한 API 인터페이스**: 서비스 간 통신은 RESTful API와 같이 잘 정의된 인터페이스를 통해 이루어집니다.
- **데이터 분리**: 각 서비스는 자체 데이터 모델을 가지며, MongoDB 컬렉션을 통해 데이터를 관리합니다.

### 2. Configuration Management (설정 관리)
- **환경별 설정**: Kubernetes ConfigMap과 Secret을 통해 환경별(dev/staging/prod) 설정을 분리 관리합니다.
- **컨테이너 설정**: 각 서비스의 설정은 환경 변수와 설정 파일을 통해 주입되며, 코드에서 분리됩니다.
- **데이터베이스 설정**: MongoDB 연결 정보와 같은 민감한 정보는 Kubernetes Secret을 통해 안전하게 관리합니다.

### 3. Container-First Design (컨테이너 우선 설계)
- **이미지 최적화**: 각 서비스는 최소한의 의존성만 포함하는 경량 컨테이너 이미지를 사용합니다.
- **Multi-stage Build**: Docker multi-stage 빌드를 통해 이미지 크기를 최적화하고 보안을 강화합니다.
- **Health Check**: 각 서비스는 헬스체크 엔드포인트를 제공하여 Kubernetes와 통합됩니다.

## 시스템 아키텍처 및 데이터 흐름

```mermaid
graph TD
    subgraph "Client Layer"
        WebClient[Web Client]
        CLI[CLI Tools]
        API[API Client]
    end

    subgraph "Kubernetes Cluster"
        Ingress[Ingress Controller]
        
        subgraph "benchmark-deployer"
            DeployerAPI[Deployer API]
            DeployerWorker[Kubernetes Client]
        end

        subgraph "benchmark-manager"
            ManagerAPI[Manager API]
            FileManager[File Manager]
            GitClient[GitHub Client]
        end

        subgraph "benchmark-results"
            ResultsAPI[Results API]
            ResultsProcessor[Results Processor]
        end

        subgraph "Data Layer"
            MongoDB[MongoDB Cluster]
            Storage[Persistent Storage]
        end

        subgraph "Kubernetes Jobs"
            BenchmarkJob[Benchmark Job Pods]
        end
    end
    
    WebClient --> Ingress
    CLI --> Ingress
    API --> Ingress
    
    Ingress --> DeployerAPI
    Ingress --> ManagerAPI
    Ingress --> ResultsAPI
    
    DeployerAPI --> DeployerWorker
    ManagerAPI --> FileManager
    ManagerAPI --> GitClient
    ResultsAPI --> ResultsProcessor
    
    DeployerWorker --> BenchmarkJob
    BenchmarkJob --> Storage
    
    DeployerAPI --> MongoDB
    ManagerAPI --> MongoDB
    ResultsAPI --> MongoDB
    
    ResultsProcessor --> MongoDB
```

**데이터 흐름 설명**:
1. **프로젝트 관리**: 클라이언트 → `benchmark-manager` → MongoDB (프로젝트 생성/관리)
2. **벤치마크 실행**: 클라이언트 → `benchmark-deployer` → Kubernetes Jobs (벤치마크 실행)
3. **결과 수집**: Kubernetes Jobs → `benchmark-results` → MongoDB (결과 저장)
4. **결과 조회**: 클라이언트 → `benchmark-results` → MongoDB (결과 조회)

## 서비스별 설계 원칙

### benchmark-deployer
- **단일 책임**: 벤치마크 배포 및 실행만 담당
- **Kubernetes 통합**: Kubernetes API를 통한 Job 생성 및 관리
- **상태 관리**: 실행 중인 벤치마크의 상태를 추적하고 관리

### benchmark-manager
- **프로젝트 중심**: 벤치마크 프로젝트 생명주기 관리
- **Git 통합**: GitHub API를 통한 소스 코드 관리
- **설정 관리**: 벤치마크 설정 및 템플릿 관리

### benchmark-results
- **데이터 처리**: 벤치마크 결과 수집, 처리, 분석
- **API 제공**: 결과 조회 및 리포팅 API
- **시각화**: 성능 데이터 시각화 및 내보내기

## 보안 설계 원칙

### 인증 및 권한 (Authentication & Authorization)
- **Service Account**: 각 서비스는 최소 권한의 Kubernetes Service Account 사용
- **API 보안**: API 키 또는 JWT를 통한 API 접근 제어
- **네트워크 보안**: Kubernetes Network Policy를 통한 트래픽 제어

### 데이터 보안
- **전송 암호화**: 모든 서비스 간 통신은 TLS 암호화
- **저장 암호화**: MongoDB 연결 시 암호화 및 민감 데이터 보호
- **Secret 관리**: Kubernetes Secret을 통한 민감 정보 관리

### 컨테이너 보안
- **Non-root 실행**: 모든 컨테이너는 non-root 사용자로 실행
- **최소 권한**: 컨테이너는 필요한 최소 권한만 가짐
- **이미지 스캔**: 컨테이너 이미지 보안 취약점 스캔

## 운영 및 모니터링 설계

### 로깅 전략
- **구조화된 로그**: JSON 형태의 구조화된 로그 출력
- **중앙 집중식**: 모든 로그는 표준 출력으로 전송하여 중앙 수집
- **로그 레벨**: 환경별 로그 레벨 설정 (DEBUG, INFO, WARN, ERROR)

### 메트릭 수집
- **애플리케이션 메트릭**: 각 서비스의 성능 및 비즈니스 메트릭
- **인프라 메트릭**: 컨테이너 및 Kubernetes 리소스 메트릭
- **Prometheus 호환**: Prometheus 메트릭 포맷 지원

### 헬스체크
- **Liveness Probe**: 서비스 생존 상태 확인
- **Readiness Probe**: 서비스 준비 상태 확인
- **Startup Probe**: 서비스 시작 상태 확인

## 설정 관리 전략

- **네임스페이스 분리**: 각 서비스(`benchmark-deployer`, `benchmark-manager`, `benchmark-results`)는 별도의 네임스페이스에 배포하여 리소스와 권한을 격리합니다.
- **환경별 설정**: 개발, 스테이징, 프로덕션 환경별로 ConfigMap과 Secret을 분리하여 관리합니다.
- **민감 정보 관리**: API 키, 데이터베이스 연결 정보 등은 Kubernetes Secret을 통해 안전하게 관리합니다.
- **버전 관리**: 모든 설정 파일은 Git으로 버전 관리하며, 변경 이력을 추적합니다.
