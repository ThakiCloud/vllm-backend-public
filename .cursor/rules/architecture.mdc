# Architecture

## 시스템 아키텍처 개요
벤치마크 백엔드 시스템은 마이크로서비스 아키텍처 패턴을 따라 설계되었으며, 각 서비스는 독립적으로 배포되고 확장될 수 있습니다. MongoDB를 중심으로 한 데이터 저장소와 Kubernetes 환경에서 컨테이너화된 서비스들이 RESTful API를 통해 통신합니다.

## Layer 구성

### 1. API Gateway Layer (API 게이트웨이)
- **역할**: 외부 클라이언트 요청을 각 마이크로서비스로 라우팅
- **구성요소**: Kubernetes Ingress Controller 또는 API Gateway
- **기능**: 인증, 로드 밸런싱, 요청 라우팅, 로깅

### 2. Service Layer (서비스 계층)
**마이크로서비스 구성**:
1. **`benchmark-deployer`**: 
   - 벤치마크 Job 생성 및 배포
   - Kubernetes API와 통신하여 Pod 생성/관리
   - 실행 상태 모니터링 및 로그 수집

2. **`benchmark-manager`**: 
   - 벤치마크 프로젝트 및 설정 관리
   - GitHub 리포지토리 연동
   - 벤치마크 템플릿 및 구성 파일 관리

3. **`benchmark-results`**: 
   - 벤치마크 실행 결과 수집 및 저장
   - 성능 데이터 분석 및 리포팅
   - 결과 시각화 및 내보내기

### 3. Data Layer (데이터 계층)
- **Primary Database**: **MongoDB** 클러스터
  - 벤치마크 프로젝트 메타데이터
  - 실행 이력 및 설정 정보
  - 성능 결과 데이터
- **Storage Strategy**: 
  - 컬렉션별 데이터 분리 (projects, deployments, results)
  - 인덱스 최적화 및 쿼리 성능 향상
  - 백업 및 복제 정책

### 4. Infrastructure Layer (인프라 계층)
- **Container Runtime**: Docker
- **Orchestration**: Kubernetes
- **Service Discovery**: Kubernetes DNS
- **Load Balancing**: Kubernetes Services
- **Monitoring**: Prometheus + Grafana (선택사항)

## 서비스 간 통신 패턴

### 동기 통신 (Synchronous)
- **RESTful API**: 서비스 간 직접 HTTP 통신
- **Service Discovery**: Kubernetes DNS를 통한 서비스 검색
- **Load Balancing**: Kubernetes Service를 통한 로드 밸런싱

### 비동기 통신 (Asynchronous)
- **Event-Driven**: 벤치마크 실행 완료 시 결과 서비스에 알림
- **Message Queue**: (선택사항) Redis 또는 RabbitMQ를 통한 큐잉

## 데이터 플로우

```
Client Request -> API Gateway -> Service Layer -> MongoDB
                                     |
                                     v
                              Kubernetes Jobs
                                     |
                                     v
                              Result Collection
```

1. **프로젝트 생성**: Client -> benchmark-manager -> MongoDB
2. **벤치마크 실행**: benchmark-manager -> benchmark-deployer -> Kubernetes Job
3. **결과 수집**: Kubernetes Job -> benchmark-results -> MongoDB
4. **결과 조회**: Client -> benchmark-results -> MongoDB

## 보안 및 인증

### 서비스 간 인증
- **Service Account**: Kubernetes Service Account 기반 인증
- **RBAC**: Role-Based Access Control을 통한 권한 관리
- **Network Policy**: 서비스 간 네트워크 격리

### 데이터 보안
- **Encryption**: MongoDB 연결 시 TLS 암호화
- **Secrets**: Kubernetes Secrets를 통한 민감 정보 관리
- **Network Security**: 네트워크 정책을 통한 트래픽 제어

## 확장성 및 성능

### 수평 확장
- **Stateless Design**: 모든 서비스가 상태를 갖지 않도록 설계
- **Auto Scaling**: Kubernetes HPA를 통한 자동 스케일링
- **Load Distribution**: 여러 인스턴스 간 부하 분산

### 성능 최적화
- **Database Indexing**: MongoDB 쿼리 성능 최적화
- **Caching**: Redis를 통한 결과 캐싱 (선택사항)
- **Connection Pooling**: 데이터베이스 연결 풀링

## 배포 전략

### 컨테이너 이미지
- **Multi-stage Build**: 효율적인 이미지 크기 최적화
- **Security Scanning**: 이미지 취약점 스캔
- **Registry**: Private Container Registry 사용

### 배포 패턴
- **Rolling Update**: 무중단 배포를 위한 롤링 업데이트
- **Blue-Green**: 중요 업데이트 시 Blue-Green 배포
- **Canary**: 점진적 배포를 통한 위험 최소화

